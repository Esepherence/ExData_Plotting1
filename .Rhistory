mk13 = data$NCV_13 > 2.5
mk18 = data$NCV_18 > 2.5
mk21 = data$NCV_21 > 2.5
mksex = (data$PoolSex == 'XX' & (data$NCV_Y > 5 | data$NCV_Y < -5)) | ((data$PoolSex == 'XY'& data$NCV_Y < 30))
ffmk = data$FF < .08
failnes = data$SampleID[nesmk]
fail13 = data$SampleID[mk13]
fail18 = data$SampleID[mk18]
fail21 = data$SampleID[mk21]
failsex = data$SampleID[mksex]
failff = data$SampleID[ffmk]
failed = data$SampleID[(nesmk | mk13 | mk18 | mk21 | mksex | ffmk)]
return(list(failnes = failnes, fail13 = fail13, fail18 = fail18, fail21 = fail21, failsex = failsex, failff = failff, FAILED = failed))
}
fc = c('HHMC3BGXX', 'HHMWWBGXX')
data = cadas30(fc)
data = cadas30(fc)
fc = c('HHMWWBGXX')
data = cadas30(fc)
poolqual(data)
samplesheet = function(FC, runfolders){
current.file = list.files(paste(runfolders[grep(FC, runfolders)], '/', sep=''), pattern='SampleSheet.csv$', full.names=TRUE)
current.file = read.csv(current.file, stringsAsFactors=F, skip=21)
return(current.file)
}
cadas30 = function(FC.vector){
require(plyr)
folders = list.dirs('//ussf-prd-isi01/Brigid/cadas3.0', recursive=F)
rawfolders = list.dirs('//ussf-prd-isi01/Brigid/raw_data', recursive=F)
rawfolders = rawfolders[grepl('next', rawfolders)]
runfolders = c()
for (folder in rawfolders){
runfolders = append(runfolders, list.dirs(folder, recursive=F))
}
select.files = data.frame()
for (FC in FC.vector){
current.file = list.files(paste(folders[grep(FC, folders)], '/CADAS_OUTPUT', sep=''), pattern='_AllSummary.csv', full.names=TRUE)
current.file = read.csv(current.file, stringsAsFactors=F)
samplesheet = samplesheet(FC, runfolders)
select.files = rbind.fill(select.files,merge(current.file, samplesheet, by='SampleID', all.x=T, suffixes=c('', 'SS')))
print(paste('Flowcell Complete: ', FC))
}
return(select.files)
}
poolqual = function(data){
data$PoolSex = substr(data$SampleID, 1, 2)
poolmk = (data$PoolSex == 'XX' | data$PoolSex == 'XY')
data = data[poolmk,]
nesmk = data$NonExcludedSites < 4000000
mk13 = data$NCV_13 > 2.5
mk18 = data$NCV_18 > 2.5
mk21 = data$NCV_21 > 2.5
mksex = (data$PoolSex == 'XX' & (data$NCV_Y > 5 | data$NCV_Y < -5)) | ((data$PoolSex == 'XY'& data$NCV_Y < 30))
ffmk = data$FF < .08
failnes = data$SampleID[nesmk]
fail13 = data$SampleID[mk13]
fail18 = data$SampleID[mk18]
fail21 = data$SampleID[mk21]
failsex = data$SampleID[mksex]
failff = data$SampleID[ffmk]
failed = data$SampleID[(nesmk | mk13 | mk18 | mk21 | mksex | ffmk)]
return(list(failnes = failnes, fail13 = fail13, fail18 = fail18, fail21 = fail21, failsex = failsex, failff = failff, FAILED = failed))
}
fc = c('HHMWWBGXX', 'HHMC3BGXX')
data = cadas30(fc)
poolqual(data)
load("D:/Quant_config.Rdata")
load("I:/cadas3.0/.RData")
View(cadas)
View(TrainingSet)
names(TrainingSet)
View(PQ2)
samplesheet = function(FC, runfolders){
current.file = list.files(paste(runfolders[grep(FC, runfolders)], '/', sep=''), pattern='SampleSheet.csv$', full.names=TRUE)
current.file = read.csv(current.file, stringsAsFactors=F, skip=21)
return(current.file)
}
cadas30 = function(FC.vector){
require(plyr)
folders = list.dirs('//ussf-prd-isi01/Brigid/cadas3.0', recursive=F)
rawfolders = list.dirs('//ussf-prd-isi01/Brigid/raw_data', recursive=F)
rawfolders = rawfolders[grepl('next', rawfolders)]
runfolders = c()
for (folder in rawfolders){
runfolders = append(runfolders, list.dirs(folder, recursive=F))
}
select.files = data.frame()
for (FC in FC.vector){
current.file = list.files(paste(folders[grep(FC, folders)], '/CADAS_OUTPUT', sep=''), pattern='_AllSummary.csv', full.names=TRUE)
current.file = read.csv(current.file, stringsAsFactors=F)
samplesheet = samplesheet(FC, runfolders)
select.files = rbind.fill(select.files,merge(current.file, samplesheet, by='SampleID', all.x=T, suffixes=c('', 'SS')))
print(paste('Flowcell Complete: ', FC))
}
return(select.files)
}
poolqual = function(data){
data$PoolSex = substr(data$SampleID, 1, 2)
poolmk = (data$PoolSex == 'XX' | data$PoolSex == 'XY')
data = data[poolmk,]
nesmk = data$NonExcludedSites < 4000000
mk13 = data$NCV_13 > 2.5
mk18 = data$NCV_18 > 2.5
mk21 = data$NCV_21 > 2.5
mksex = (data$PoolSex == 'XX' & (data$NCV_Y > 5 | data$NCV_Y < -5)) | ((data$PoolSex == 'XY'& data$NCV_Y < 30))
ffmk = data$FF < .08
failnes = data$SampleID[nesmk]
fail13 = data$SampleID[mk13]
fail18 = data$SampleID[mk18]
fail21 = data$SampleID[mk21]
failsex = data$SampleID[mksex]
failff = data$SampleID[ffmk]
failed = data$SampleID[(nesmk | mk13 | mk18 | mk21 | mksex | ffmk)]
return(list(failnes = failnes, fail13 = fail13, fail18 = fail18, fail21 = fail21, failsex = failsex, failff = failff, FAILED = failed))
}
fc = c('HLHH5BGXX', 'HLHG5BGXX')
data = cadas30(fc)
data$SampleID
data$SampleType
data$Description
data$SampleType = as.factor(substr(data$SampleID, nchar(data$SampleID), 1))
data$SampleType
nchar(data$SampleID)
substr(data$SampleID, nchar(data$SampleID), 1)
substr(data$SampleID, nchar(data$SampleID)-1, 1)
substr(data$SampleID, nchar(data$SampleID)-5, 1)
nchar(data$SampleID)
data$SampleID
substr(data$SampleID, 7, 1)
substr(data$SampleID, 2, 1)
substr(data$SampleID, nchar(data$SampleID), nchar(data$SampleID))
data$SampleType = substr(data$SampleID, nchar(data$SampleID), nchar(data$SampleID))
data$SampleType
data$SampleType = as.factor(substr(data$SampleID, nchar(data$SampleID), nchar(data$SampleID)))
data$SampleType
plot(data$SampleType, data$NonExcludedSites)
plot(data$SampleType, data$NonExcludedSites, main='NonExcludedSites')
data$SampleType[data$SampleType == 'V'] = 'VeriSeq'
data$SampleType == 'V'
plot(data$SampleType, data$NonExcludedSites, main='NonExcludedSites')
data$SampleType = as.factor(substr(data$SampleID, nchar(data$SampleID), nchar(data$SampleID)))
data$SampleType == 'V'
data$SampleType[data$SampleType == 'V'] = 'VeriSeq'
data$SampleType = as.factor(substr(data$SampleID, nchar(data$SampleID), nchar(data$SampleID)))
data$SampleType[as.character(data$SampleType) == 'V'] = 'VeriSeq'
data$SampleType = as.factor(substr(data$SampleID, nchar(data$SampleID), nchar(data$SampleID)))
as.character(data$SampleType)
data$SampleType[as.character(data$SampleType) == 'V']
data$SampleType[(data$SampleType) == 'V'] = 'VeriSeq'
data$SampleType = as.factor(substr(data$SampleID, nchar(data$SampleID), nchar(data$SampleID)))
data$SampleType[(data$SampleType) == 'V']
data$SampleType[(data$SampleType) == 'V'] = 'VeriSeq'
data$SampleType[(data$SampleType) == 'T'] = 'TruSeq'
data$SampleType
data$SampleType = as.factor(substr(data$SampleID, nchar(data$SampleID), nchar(data$SampleID)))
plot(data$SampleType, data$NonExcludedSites, main='NonExcludedSites')
data$SampleID
data$Pool = substr(data$SampleID, 1, 2)
data$SampleType = (substr(data$SampleID, nchar(data$SampleID), nchar(data$SampleID)))
data$Experiment - as.factor(paste(data$Pool, data$SampleType, sep='-'))
?paste
data$Experiment
data$Experiment = as.factor(paste(data$Pool, data$SampleType, sep='-'))
data$Experiment
plot(data$Experiment, data$NonExcludedSites, main='NonExcludedSites', col=c('Rose', 'Rose', 'Cadetblue', 'CadetBlue'))
plot(data$Experiment, data$NonExcludedSites, main='NonExcludedSites', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue'))
plot(data$Experiment, data$Library_Concentration, main='Concentration', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue'))
plot(data$Experiment, data$Library_Concentration, main='Concentration', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue'))
plot(data$Experiment, data$NonExcludedSites, main='NonExcludedSites', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue'))
plot(data$Experiment, data$Library_Concentration, main='Concentration', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue'))
plot(data$Experiment, data$Library_Concentration, main='Concentration', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue'))
plot(data$Experiment, data$NonExcludedSites, main='NonExcludedSites', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue'))
plot(data$Experiment, data$FF, main='Fetal Fraction', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue'))
plot(data$Experiment, data$ScoreT_21, main='Score Chromosome 21', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue'))
data$Median = ave(data$ScoreT_21, data$Experiment, FUN=median)
data$Median_21
data$Experiment
data$Median
plot(data$Experiment, data$Median, main='Score 21', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue'))
data[,c('SampleID','Median')]
plot(data$Experiment, data$FF, main='Fetal Fraction', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue'))
plot(data$Experiment, data$FF, main='Fetal Fraction', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue'))
plot(data$Experiment, data$Library_Concentration, main='Concentration', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue'))
plot(data$Experiment, data$NonExcludedSites, main='NonExcludedSites', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue'))
data$Sample_Well
data$Sample_Plate
plot(data$Experiment, data$FF, main='Fetal Fraction', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue3'))
plot(data$Experiment, data$FF, main='Fetal Fraction', col=c('Tomato', 'Tomato', 'Cadetblue', 'CadetBlue2'))
plot(data$Experiment, data$Library_Concentration, main='Concentration', col=c('Tomato', 'Tomato', 'Cadetblue3', 'CadetBlue3'))
plot(data$Experiment, data$NonExcludedSites, main='NonExcludedSites', col=c('Tomato', 'Tomato', 'Cadetblue3', 'CadetBlue3'))
data$Experiment = as.factor(paste(data$Pool, data$Sample_Plate, sep='-'))
data$SampleType[(data$SampleType) == 'V'] = 'VeriSeq'
data$SampleType[(data$SampleType) == 'T'] = 'TruSeq'
plot(data$Experiment, data$Library_Concentration, main='Concentration', col=c('Tomato', 'Tomato', 'Cadetblue3', 'CadetBlue3'))
plot(data$Experiment, data$Library_Concentration, main='Concentration', col=c('Tomato', 'Tomato', 'Cadetblue3', 'CadetBlue3'))
plot(data$Experiment, data$NonExcludedSites, main='NonExcludedSites', col=c('Tomato', 'Tomato', 'Cadetblue3', 'CadetBlue3'))
plot(data$Experiment, data$FF, main='Fetal Fraction', col=c('Tomato', 'Tomato', 'Cadetblue3', 'CadetBlue3'))
plot(data$Experiment, data$ScoreT_21, main='Score Chromosome 21', col=c('Tomato', 'Tomato', 'Cadetblue3', 'CadetBlue3'))
require('xlsx')
#Colors
best='cadetblue'
base='snow3'
white='white'
data = read.xlsx(file.path('C:','Users',Sys.getenv("USERNAME"),'Box Sync', 'VeriSeq NIPT Solution', 'Development', 'AccuClear Dye', 'AccuClear Dye.xlsx'), sheetIndex=1,stringsAsFactors=F)
B1 = data$Batch == 400397
B2 = data$Batch == 400395
plot(data$Concentration[B1], (data$Accuclear1[B1] + data$Accuclear2[B1] + data$Accuclear3[B1])/3,
main='Correlation of QuantiFluor and AccuClear', xlab='Quantifluor pg/µL', ylab='Average of 3 AccuClear Reads (pg/µL)')
abline(lm(((data$Accuclear1[B1] + data$Accuclear2[B1] + data$Accuclear3[B1])/3)~data$Concentration[B1]), col='Darkgray')
abline(c(0,1))
mtext(paste('R squared: ', round(summary(lm(((data$Accuclear1[B1] + data$Accuclear2[B1] + data$Accuclear3[B1])/3)~data$Concentration[B1]))$r.squared, 2)), col='Darkgray')
plot(data$Accuclear1[B1] , data$Accuclear2[B1],
main='Correlation of Three AccuClear Reads', xlab='First Read (pg/µL)', ylab='Other Reads (pg/µL)')
points(data$Accuclear1[B1] , data$Accuclear3[B1])
abline(summary(lm(data$Accuclear2[B1] ~ data$Accuclear1[B1])), col='Darkgray')
abline(c(0,1))
mtext(paste('R squared: ', round(summary(lm(data$Accuclear1[B1] ~ data$Accuclear2[B1]))$r.squared, 2)), col='Darkgray')
t.test(data$Accuclear1[B1], data$Accuclear2[B1], paired=T)
plot(data$Accuclear1[B1] , data$Accuclear2[B1],
main='Correlation of Three AccuClear Reads', xlab='First Read (pg/µL)', ylab='Other Reads (pg/µL)')
points(data$Accuclear1[B1] , data$Accuclear3[B1])
abline(summary(lm(data$Accuclear2[B1] ~ data$Accuclear1[B1])), col='Darkgray')
abline(c(0,1))
mtext(paste('R squared: ', round(summary(lm(data$Accuclear1[B1] ~ data$Accuclear2[B1]))$r.squared, 2)), col='Darkgray')
View(data)
plot(data$Concentration, data$Accuclear1,
main='Correlation of QuantiFluor and AccuClear', xlab='Quantifluor pg/µL', ylab='Average of 3 AccuClear Reads (pg/µL)')
abline(lm(((data$Accuclear1[B1] + data$Accuclear2[B1] + data$Accuclear3[B1])/3)~data$Concentration[B1]), col='Darkgray')
abline(c(0,1))
mtext(paste('R squared: ', round(summary(lm(((data$Accuclear1[B1] + data$Accuclear2[B1] + data$Accuclear3[B1])/3)~data$Concentration[B1]))$r.squared, 2)), col='Darkgray')
abline(lm((data$Accuclear1[B1]~data$Concentration[B1]), col='Darkgray')
plot(data$Concentration, data$Accuclear1,
main='Correlation of QuantiFluor and AccuClear', xlab='Quantifluor pg/µL', ylab='Average of 3 AccuClear Reads (pg/µL)')
abline(lm(data$Accuclear1[B1]~data$Concentration[B1]), col='Darkgray')
abline(c(0,1))
mtext(paste('R squared: ', round(summary(lm(((data$Accuclear1[B1] + data$Accuclear2[B1] + data$Accuclear3[B1])/3)~data$Concentration[B1]))$r.squared, 2)), col='Darkgray')
View(data)
plot(data$Concentration[B1], (data$Accuclear1[B1] + data$Accuclear2[B1] + data$Accuclear3[B1])/3,
main='Correlation of QuantiFluor and AccuClear', xlab='Quantifluor pg/µL', ylab='Average of 3 AccuClear Reads (pg/µL)')
abline(lm(((data$Accuclear1[B1] + data$Accuclear2[B1] + data$Accuclear3[B1])/3)~data$Concentration[B1]), col='Darkgray')
abline(c(0,1))
mtext(paste('R squared: ', round(summary(lm(((data$Accuclear1[B1] + data$Accuclear2[B1] + data$Accuclear3[B1])/3)~data$Concentration[B1]))$r.squared, 2)), col='Darkgray')
plot(data$Accuclear1[B1] , data$Accuclear2[B1],
main='Correlation of Three AccuClear Reads', xlab='First Read (pg/µL)', ylab='Second and Third Read (pg/µL)')
points(data$Accuclear1[B1] , data$Accuclear3[B1])
abline(summary(lm(data$Accuclear2[B1] ~ data$Accuclear1[B1])), col='Darkgray')
abline(c(0,1))
mtext(paste('R squared: ', round(summary(lm(data$Accuclear1[B1] ~ data$Accuclear2[B1]))$r.squared, 2)), col='Darkgray')
plot(data$Accuclear1[B1] , data$Accuclear2[B1],
main='Correlation of Three AccuClear Reads', xlab='First Read (pg/µL)', ylab='Second and Third Reads (pg/µL)')
points(data$Accuclear1[B1] , data$Accuclear3[B1])
abline(summary(lm(data$Accuclear2[B1] ~ data$Accuclear1[B1])), col='Darkgray')
abline(c(0,1))
mtext(paste('R squared: ', round(summary(lm(data$Accuclear1[B1] ~ data$Accuclear2[B1]))$r.squared, 2)), col='Darkgray')
mean(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1])
(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3
plot((data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3 , data$Accuclear1[B1],
main='Correlation of Three AccuClear Reads', xlab='First Read (pg/µL)', ylab='Second and Third Reads (pg/µL)')
points(data$Accuclear1[B1] , data$Accuclear2[B1])
points(data$Accuclear1[B1] , data$Accuclear3[B1])
abline(summary(lm(data$Accuclear2[B1] ~ data$Accuclear1[B1])), col='Darkgray')
abline(c(0,1))
mtext(paste('R squared: ', round(summary(lm(data$Accuclear1[B1] ~ data$Accuclear2[B1]))$r.squared, 2)), col='Darkgray')
cbind(rbind(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3), rbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]))
cbind(rbind((data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3), rbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]))
test = cbind(rbind((data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3), rbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]))
rbind((data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3)
cbind(c((data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3), c(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]))
test = factor(cbind(c((data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3), c(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1])))
test = data.frame(cbind(c((data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3), c(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1])))
test = data.frame(cbind(c((data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3), c(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1])))
?data.frame
test = data.frame(cbind(c((data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3), c(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1])), names=c('Average', 'Read'))
View(test)
test = data.frame(cbind(c((data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3,(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3), c(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1])))
names(test) = c('Average', 'Read')
test
head(test)
plot((test$Average,test$Read,
main='Correlation of Three AccuClear Reads', xlab='First Read (pg/µL)', ylab='Second and Third Reads (pg/µL)')
points(data$Accuclear1[B1] , data$Accuclear2[B1])
points(data$Accuclear1[B1] , data$Accuclear3[B1])
abline(summary(lm(data$Accuclear2[B1] ~ data$Accuclear1[B1])), col='Darkgray')
abline(c(0,1))
mtext(paste('R squared: ', round(summary(lm(test$Read ~ test$Average))$r.squared, 2)), col='Darkgray')
plot((test$Average,test$Read,
main='Correlation of Three AccuClear Reads', xlab='First Read (pg/µL)', ylab='Second and Third Reads (pg/µL)')
points(data$Accuclear1[B1] , data$Accuclear2[B1])
points(data$Accuclear1[B1] , data$Accuclear3[B1])
abline(summary(lm(data$Accuclear2[B1] ~ data$Accuclear1[B1])), col='Darkgray')
abline(c(0,1))
mtext(paste('R squared: ', round(summary(lm(test$Read ~ test$Average))$r.squared, 2)), col='Darkgray')
plot((test$Average,test$Read,
main='Correlation of Three AccuClear Reads', xlab='First Read (pg/µL)', ylab='Second and Third Reads (pg/µL)')
plot(test$Average,test$Read,
main='Correlation of Three AccuClear Reads', xlab='First Read (pg/µL)', ylab='Second and Third Reads (pg/µL)')
points(data$Accuclear1[B1] , data$Accuclear2[B1])
points(data$Accuclear1[B1] , data$Accuclear3[B1])
abline(summary(lm(data$Accuclear2[B1] ~ data$Accuclear1[B1])), col='Darkgray')
abline(c(0,1))
mtext(paste('R squared: ', round(summary(lm(test$Read ~ test$Average))$r.squared, 2)), col='Darkgray')
plot(test$Average,test$Read,
main='Correlation of Three AccuClear Reads', xlab='Average of Three Reads (pg/µL)', ylab='Three Reads (pg/µL)')
points(data$Accuclear1[B1] , data$Accuclear2[B1])
points(data$Accuclear1[B1] , data$Accuclear3[B1])
abline(summary(lm(data$Accuclear2[B1] ~ data$Accuclear1[B1])), col='Darkgray')
abline(c(0,1))
mtext(paste('R squared: ', round(summary(lm(test$Read ~ test$Average))$r.squared, 2)), col='Darkgray')
t.test(data$Accuclear1[B1], data$Accuclear2[B1], paired=T)
(data$Accuclear1[B1]+ data$Accuclear2[B1]+ data$Accuclear3[B1])/3
mean(c(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]))
c(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1])
sd(c(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]))
cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1])
sd(cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]))
(avecbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]), rownames(cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1])),FUN=mean)
ave(cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]), rownames(cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1])),FUN=mean)
rownames(cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]))
rownames
rownames(test)
rownames(cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]))
rownames(data.frame(cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1])))
blah=data.frame(cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]))
ave(blah, rownames(blah), mean)
ave(cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]), rownames(blah), mean)
apply(cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]), 1, FUN=mean)
apply(cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]), 1, FUN=sd)
apply(cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]), 1, FUN=sd)/apply(cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]), 1, FUN=mean)
mean(apply(cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]), 1, FUN=sd)/apply(cbind(data$Accuclear1[B1], data$Accuclear2[B1], data$Accuclear3[B1]), 1, FUN=mean))
data = read.xlsx(file.path('C:','Users',Sys.getenv("USERNAME"),'Box Sync', 'VeriSeq NIPT Solution', 'Development', 'Quantitation Standard Curve Optimization', 'Quantitation Standard Curve Optimization.xlsx'), sheetIndex=1,stringsAsFactors=F)
require('xlsx')
#Colors
best='cadetblue'
base='snow3'
white='white'
data = read.xlsx(file.path('C:','Users',Sys.getenv("USERNAME"),'Box Sync', 'VeriSeq NIPT Solution', 'Development', 'Quantitation Standard Curve Optimization', 'Quantitation Standard Curve Optimization.xlsx'), sheetIndex=1,stringsAsFactors=F)
View(data)
plot(data$concentration, data$prec_cv)
mk = data$prec_cv >-.001 & !is.na(data$prec_cv)
plot(data$concentration[mk], data$prec_cv[mk])
mk = data$prec_cv >.001 & !is.na(data$prec_cv)
plot(data$concentration[mk], data$prec_cv[mk])
plot(data$concentration[mk], data$prec_cv[mk], xlim=c(0, 500))
plot(data$concentration[mk], data$prec_cv[mk], xlim=c(0, 500), log='x')
plot(data$concentration[mk], data$prec_cv[mk], log='x')
plot(data$concentration[mk], data$prec_cv[mk], xlim=c(0, 500))
plot(data$concentration[mk], data$prec_cv[mk], xlim=c(0, 50))
plot(data$concentration[mk], data$prec_cv[mk], xlim=c(0, 50), xlab="Standard Concentration", ylab='%CV of Triplicate Reps')
plot(data$concentration[mk], data$prec_cv[mk], xlim=c(0, 50), xlab="Standard Concentration (pg/µL)", ylab='%CV of Triplicate Reps')
plot(data$concentration[mk], data$prec_cv[mk], xlim=c(0, 50), main='CV of Standard Builds by Concentration',
xlab="Standard Concentration (pg/µL)", ylab='%CV of Triplicate Reps')
data = read.xlsx(file.path('C:','Users',Sys.getenv("USERNAME"),'Box Sync', 'VeriSeq NIPT Solution', 'Development', 'Pool-Index optimization', 'Pool-Index optimization.xlsx'), sheetIndex=1,stringsAsFactors=F)
data = read.xlsx(file.path('C:','Users',Sys.getenv("USERNAME"),'Box Sync', 'VeriSeq NIPT Solution', 'Development', 'Pool-Index Optimization', 'Pool-Index optimization.xlsx'), sheetIndex=1,stringsAsFactors=F)
require('xlsx')
#Colors
best='cadetblue'
base='snow3'
white='white'
data = read.xlsx(file.path('C:','Users',Sys.getenv("USERNAME"),'Box Sync', 'VeriSeq NIPT Solution', 'Development', 'Pool-Index Optimization', 'Pool-Index optimization.xlsx'), sheetIndex=1,stringsAsFactors=F)
View(data)
data = read.xlsx(file.path('C:','Users',Sys.getenv("USERNAME"),'Box Sync', 'VeriSeq NIPT Solution', 'Development', 'Concentration Correction Curve', 'Concentration Correction Curve.xlsx'), sheetIndex=1,stringsAsFactors=F)
data$Reference
plot(as.factor(data$Reference), data$IndexedReads)
data$SampleID
data[data$IndexReads < 2000000,c('SampleID', 'IndexReads')
)
data[data$IndexReads < 2000000,c('SampleID', 'IndexReads')]
data[,c('SampleID','IndexReads')]
data[data$IndexReads < 2000000,c('SampleID', 'IndexedReads')]
data[data$IndexedReads < 2000000,c('SampleID', 'IndexedReads')]
data$MAD = ave(data$NonExcludedSites, data$Reference, FUN=mad)
uniques(paste(data$Reference, data$MAD))
unique(paste(data$Reference, data$MAD))
windows()
plot(data$Time, data$Global_active_power)
data$Time
setwd('C:/GitHub/ExData_Plotting1')
# Load data if not already loaded
# Assumes file in current working directory
if (nrow(data) < 2880){
data = read.delim('household_power_consumption.txt', sep=';')
}
#Reformat date and limit data to desired range
data$Date = as.Date(data$Date, '%d/%m/%Y')
data = data[data$Date == '2007-02-01' | data$Date == '2007-02-02',]
setwd('C:/GitHub/ExData_Plotting1')
# Load data if not already loaded
# Assumes file in current working directory
if (nrow(data) < 2880){
data = read.delim('household_power_consumption.txt', sep=';')
}
#Reformat date and limit data to desired range
data$Date = as.Date(data$Date, '%d/%m/%Y')
data = data[data$Date == '2007-02-01' | data$Date == '2007-02-02',]
setwd('C:/GitHub/ExData_Plotting1')
if (nrow(data) < 2880){
data = read.delim('household_power_consumption.txt', sep=';')
}
try(nrow(data) < 2880)
try(1)
if try(nrow(data) < 2880){
data = read.delim('household_power_consumption.txt', sep=';')
}
if (try(nrow(data)) < 2880){
data = read.delim('household_power_consumption.txt', sep=';')
}
data = 1
if (try(nrow(data)) < 2880){
data = read.delim('household_power_consumption.txt', sep=';')
}
try(nrow(data)) < 2880)
try(nrow(data)) < 2880
data = read.delim('household_power_consumption.txt', sep=';')
nrow(data)
try(nrow(data))
(try(nrow(data)) < 2880)
if (try(nrow(data)) < 2880){
data = read.delim('household_power_consumption.txt', sep=';')
}
data$Date = as.Date(data$Date, '%d/%m/%Y')
data = data[data$Date == '2007-02-01' | data$Date == '2007-02-02',]
plot(data$Time, data$Global_active_power)
data$Global_active_power
data$Time
?as.Date
as.Date(data$Time, '%H:%M%S')
as.Date(data$Time, '%H:%M:%S')
plot(as.Date(data$Time, '%H:%M:%S'), as.numeric(data$Global_active_power))
?as.Date
paste(data$Date, data$Time, sep=' ')
as.Date(paste(data$Date, data$Time, sep=' '), '%d-%m-%Y %H:%M:%S')
paste(data$Date, data$Time, sep=' ')
as.Date(paste(data$Date, data$Time, sep=' '), '%Y-%m-%d %H:%M:%S')
plot(as.Date(paste(data$Date, data$Time, sep=' '), '%Y-%m-%d %H:%M:%S'), as.numeric(data$Global_active_power))
?as.Date
as.Date(paste(data$Date, data$Time, sep=' '), '%Y-%m-%d %H:%M:%S')
format(as.Date(paste(data$Date, data$Time, sep=' '), '%Y-%m-%d %H:%M:%S'), '%Y-%m-%d %H:%M:%S')
as.POSIXct(paste(data$Date, data$Time, sep=' '), '%Y-%m-%d %H:%M:%S')
?as.POSIXct
as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='PST', '%Y-%m-%d %H:%M:%S')
as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S')
plot(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Global_active_power))
plot(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Global_active_power), type='l')
plot(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Global_active_power),
type='l', ylab='Global Active Power (kilowatts)')
plot(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Global_active_power),
type='l', ylab='Global Active Power (kilowatts)', xlab='12AM Thursday to 12AM Saturday')
png(filename='plot2.png')
plot(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Global_active_power),
type='l', ylab='Global Active Power (kilowatts)', xlab='12AM Thursday to 12AM Saturday')
dev.off()
png(filename='plot1.png')
hist(as.numeric(data$Global_active_power)/1000, col='Tomato', main='Global Active Power', xlab='Global Active Power (kilowatts)')
mtext('by Esepherence', col='darkgray')
dev.off()
png(filename='plot2.png')
plot(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Global_active_power)/1000,
type='l', ylab='Global Active Power (kilowatts)', xlab='12AM Thursday to 12AM Saturday')
dev.off()
plot(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Global_active_power)/1000,
type='l', ylab='Global Active Power (kilowatts)', xlab='12AM Thursday to 12AM Saturday')
data$Global_active_power
data$Global_reactive_power
data$Global_intensity
plot(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Sub_metering_1)/1000,
type='l', ylab='Global Active Power (kilowatts)', xlab='12AM Thursday to 12AM Saturday')
plot(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Sub_metering_1),
type='l', ylab='Global Active Power (kilowatts)', xlab='12AM Thursday to 12AM Saturday')
lines(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Sub_metering_2), col='Blue')
lines(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Sub_metering_3), col='Red')
plot(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Sub_metering_1),
type='l', ylab='Global Active Power (kilowatts)', xlab='12AM Thursday to 12AM Saturday')
lines(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Sub_metering_2), col='Tomato')
lines(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Sub_metering_3), col='Cadetblue')
mtext('by Esepherence')
mtext('by Esepherence', col='Darkgray')
png(filename='plot2.png')
plot(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Global_active_power)/1000,
type='l', ylab='Global Active Power (kilowatts)', xlab='12AM Thursday to 12AM Saturday')
mtext('by Esepherence', col='Darkgray')
dev.off()
png(filename='plot3.png')
plot(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Sub_metering_1),
type='l', ylab='Global Active Power (kilowatts)', xlab='12AM Thursday to 12AM Saturday')
lines(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Sub_metering_2), col='Tomato')
lines(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Sub_metering_3), col='Cadetblue')
mtext('by Esepherence', col='Darkgray')
dev.off()
?legend
legend('topright', legend=c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'), type='l', col=c('Black', 'Tomato', 'Cadetblue'))
legend('topright', legend=c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'), lty=1, col=c('Black', 'Tomato', 'Cadetblue'))
png(filename='plot3.png')
plot(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Sub_metering_1),
type='l', ylab='Energy sub metering', xlab='12AM Thursday to 12AM Saturday')
lines(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Sub_metering_2), col='Tomato')
lines(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Sub_metering_3), col='Cadetblue')
mtext('by Esepherence', col='Darkgray')
legend('topright', legend=c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'), lty=1, col=c('Black', 'Tomato', 'Cadetblue'))
dev.off()
plot(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Global_active_power)/1000,
type='l', ylab='Global Active Power (kilowatts)', xlab='12AM Thursday to 12AM Saturday')
mtext('by Esepherence', col='Darkgray')
dev.off()
png(filename='plot2.png')
plot(as.POSIXct(paste(data$Date, data$Time, sep=' '), tz='GMT', '%Y-%m-%d %H:%M:%S'), as.numeric(data$Global_active_power)/1000,
type='l', ylab='Global Active Power (kilowatts)', xlab='12AM Thursday to 12AM Saturday')
mtext('by Esepherence', col='Darkgray')
dev.off()
png(filename='plot1.png')
hist(as.numeric(data$Global_active_power)/1000, col='Tomato', main='Global Active Power', xlab='Global Active Power (kilowatts)')
mtext('by Esepherence', col='darkgray')
dev.off()
